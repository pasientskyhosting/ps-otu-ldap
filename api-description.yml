openapi: "3.0.0"

info:
  version: 1.0.0
  title: PatientSky One Time User API
  description: API to generate temporary one time users from LDAP backend
  contact:
    name: Patientsky Infrastructure Team
    email: kj@patientsky.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    
servers:
  - url: https://odn1-otu.privatedns.zone/api/v1
  - url: https://cph1-otu.privatedns.zone/api/v1
  - url: https://osl1-otu.privatedns.zone/api/v1
  - url: https://sto1-otu.privatedns.zone/api/v1
  
paths:

  # -------------------
  # Ping
  # -------------------
  
  /ping:
    get:
      tags:
        - Ping
      summary: Check server is alive
      description: Check if server is answering
      operationId: ping
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'

  # -------------------
  # Auth
  # -------------------
  
  /auth/verify:
    get:
      security:
        - BearerAuth: []
      tags:
        - Auth
      summary: Verify token
      description: Verify JWT token is valid
      operationId: authVerify
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /auth/authorize:
    post:
      tags:
        - Auth
      summary: Authenticate
      description: Authenticate with LDAP credentials
      operationId: authAuthenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorize'
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorize'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # -------------------
  # User  
  # -------------------
  
  /users:
    get:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Get active users
      description: Get active users created by self
      operationId: getUsers
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'          
    
          
  # -------------------
  # Group
  # -------------------
        
  /groups:
    
    post:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Create one time user group"
      description: "Users in specific LDAP groups can create an one time user group. This group is mapped from glauth "
      operationId: "createGroup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupNew'
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      
    get:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Get groups for one time user generation"
      description: "Returns all groups that the specific user has access to. User can create one time users from these groups. These groups are mapped 1:1 with LDAP groups"
      operationId: "getGroups"
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'        
          
  /groups/{group_name}:
  
    delete:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Delete group"
      description: "Deletes group and invalidates all users"
      operationId: "deleteGroup"
      parameters:
        - name: group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFoundError'

  /groups/{group_name}/users:
  
    post:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Generate a new one time user"
      description: "Generate a one time user for the specifiec LDAP group name"
      operationId: "generateUser"
      parameters:
        - name: group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '201':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
    get:
      tags:
        - Groups
      security:
        - ApiKeyAuth: []
      summary: "Get all users in group"
      description: "Get all users in a given LDAP group. This endpoint is called by Sync services and payload is encrypted with an encryptionkey"
      operationId: "getGroupUsers"
      parameters:
        - name: group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '200':
          description: Successful result
          content:
            text/plain:
              schema:
                $ref: '#/components/responses/EncryptedUsers'
                  
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorAPIKey'        
  

security:

  - ApiKeyAuth: []
  - BearerAuth: []

components:

  responses:
    
    EncryptedUsers:
      description: Encrypted users
    ForbiddenError:
      $ref: "#/components/schemas/ForbiddenError"
    ValidationError:
      $ref: "#/components/schemas/ValidationError"
    UnauthorizedError:
      description: Access token is missing or invalid
    UnauthorizedErrorAPIKey:
      description: API key s missing or invalid
    NotFoundError:
      description: Not found

  securitySchemes:
  
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:

    # -------------------
    # Error
    # -------------------
    
    ForbiddenError:
      description: Not allowed access to this resource
      type: "object"
      properties:
        forbidden_error:
          type: "object"
            
    ValidationError:
      description: Bad request
      type: "object"
      properties:
        validation_error:
          type: "object"

    # -------------------
    # Ping  
    # -------------------

    Ping:
      type: "object"
      properties:
        version:
          type: "string"
          example: "v1.0.1"
        message:
          type: "string"
          example: "pong"
  
    # -------------------
    # Auth  
    # -------------------

    Verify:
      type: "object"
      properties:
        token:
          type: "string"
          example: "yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw"
          
    Authorize:
      type: "object"
      properties:
        username:
          type: "string"
          example: "kj"
          description: LDAP username
        password:
          description: LDAP password + OTP token
          type: "string"
          example: "password+otp"
          
    # -------------------
    # Group
    # -------------------
    
    Group:
      type: "object"
      properties:
        group_name:
          type: string
          example: proxy-sql
        ldap_group_name:
          type: string
          example: proxy-sql
        lease_time:
          type: integer
          example: 720 # 12 hours
          description: Lease time in minutes
        create_time:
          type: integer
          example: 1554102608          
        create_by:
          type: string
          example: kj
          
    GroupNew:
      type: "object"
      properties:
        group_name:
          type: string
          example: proxy-sql
        ldap_group_name:
          type: string
          example: proxy-sql
        lease_time:
          type: integer
          example: 720 # 12 hours 
          description: Lease time in minutes
  
    # -------------------
    # User  
    # -------------------

    User:
      required:
        - name  
      properties:
        username:
          type: "string"
          example: "kj-proxy-sql-yx4dajg8vn"
        password:
          type: "string"
          example: "jkybs9p8uukysmfarapf"
        group_name:
          type: "string"
          example: "proxy-sql"
        expire_time:
          type: "integer"
          example: 1554102608
        create_time:
          type: "integer"
          example: 1554100608
        create_by:
          type: "string"
          example: "kj"

    UserEncrypted:
      required:
        - name  
      properties:
        username:
          type: "string"
          example: "kj-proxy-sql-yx4dajg8vn"
        password:
          type: "string"
          example: "encrypted_password"
          description: "Encrypted password that sync service must decrypt with encryption key"
        group_name:
          type: "string"
          example: "proxy-sql"
        expire_time:
          type: "integer"
          example: 1554102608
        create_time:
          type: "integer"
          example: 1554100608
        create_by:
          type: "string"
          example: "kj"