openapi: "3.0.0"

info:
  version: 1.0.0
  title: PatientSky One Time User API
  description: API to generate temporary/one-time users ("Users") and groups ("Groups") mapped from a LDAP backend ("LDAP-Groups"). </br></br>Users login with their LDAP credentials ("Auth") and are able to generate new temporary/one-time users from the visible groups. These groups have specified lease times and are mapped to the LDAP backend groups. </br></br>An LDAP group can have many mapped groups with different lease times and custom properties.</br></br>When users are created various sync-services can fetch these temporary/one-time users and create them locally with their own business logic.
  contact:
    name: PatientSky Infrastructure Team
    email: kj@patientsky.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
    
servers:
  - url: https://odn1-inf-otu.privatedns.zone/api/v1
  - url: https://osl1-inf-otu.privatedns.zone/api/v1
  - url: https://cph1-inf-otu.privatedns.zone/api/v1
  - url: https://sto1-inf-otu.privatedns.zone/api/v1
  
paths:

  # -------------------
  # Ping
  # -------------------
  
  /ping:
    get:
      tags:
        - Ping
      summary: Check server is alive
      description: Check if server is answering
      operationId: ping
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'

  # -------------------
  # Auth
  # -------------------
  
  /auth:
    get:
      security:
        - BearerAuth: []
      tags:
        - Auth
      summary: Verify JWT token
      description: Verify JWT token is valid
      operationId: authVerify
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'
        
    post:
      tags:
        - Auth
      summary: Authenticate with LDAP
      description: Authenticate with LDAP credentials
      operationId: authAuthenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorize'
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorize'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'

  # -------------------
  # Users
  # -------------------
  /groups/{group_name}/users:
  
    get:
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      summary: Get all users for Sync Services
      description: Get active users. On each run, the LDAP grooup is checked and, if not exists, then the the group will be deleted and all users expired.
      operationId: getUsers
      parameters:
        - name: group_name
          in: path
          description: Group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnAuthorizedError' 
  
    post:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: "Generate a user"
      description: "Generate a user for the specific group. Checks if user has access to matched LDAP group."
      operationId: "generateUser"
      parameters:
        - name: group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '201':
          description: User response
          content:
            application/json:
              schema:                
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'
        '404':
          $ref: '#/components/responses/AssetNotFoundError'
   
  
  /users:
    get:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Get active one time users
      description: Get active users created by this LDAP user. Checks if user still has access to mapped LDAP groups.
      operationId: getActiveUsers
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'          
    
  # -------------------
  # LDAP-Group
  # -------------------
  /ldap-groups:
  
    get:
      tags:
        - LDAP-Groups
      security:
        - BearerAuth: []
      summary: Get all LDAP groups
      description: Returns list of the LDAP groups the user is a member of
      operationId: getAllLDAPGroups
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LDAPGroup'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'

  # -------------------
  # Group
  # -------------------
        
  /ldap-groups/{ldap_group_name}/groups:
    
    get:
      tags:
        - Groups
      security:
         - ApiKeyAuth: []
      summary: "Get all groups for Sync Services"
      description: "Returns all groups created in this LDAP scope. Will return all groups regardless of login."
      operationId: "getAllGroupsInScope"
      parameters:
        - name: ldap_group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'
          
    post:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Create a group for this LDAP-group"
      description: "Users with the correct credentials can create an group. This group is mapped from glauth LDAP groups. Only users in the the admins LDAP groups are allowed to call this endpoint."
      operationId: "createGroup"
      parameters:
        - name: ldap_group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupNew'
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'
         
  /groups:
  
    get:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Get all groups for user generation"
      description: "Returns all groups created. Will only return groups that the user has LDAP access to"
      operationId: "getAllGroups"
      responses:
        '200':
          description: Successful result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnAuthorizedError'
          
  /groups/{group_name}:
  
    delete:
      tags:
        - Groups
      security:
        - BearerAuth: []
      summary: "Delete group"
      description: "Deletes group and invalidates all users. Checks if user has access to LDAP group."
      operationId: "deleteGroup"
      parameters:
        - name: group_name
          in: path
          description: LDAP group name
          required: true
          x-example: "proxy-sql"
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/AssetNotFoundError'
  

security:

  - ApiKeyAuth: []
  - BearerAuth: []

components:

  responses:
       
    ValidationError:
      $ref: '#/components/schemas/ErrorAPI' 
    ForbiddenError:
      $ref: '#/components/schemas/ErrorAPI'
    UnAuthorizedError:
      $ref: '#/components/schemas/ErrorAPI'
    ConflictError:
      $ref: '#/components/schemas/ErrorAPI'
    UnauthorizedErrorAPIKey:
      $ref: '#/components/schemas/ErrorAPI'
    AssetNotFoundError:      
      $ref: '#/components/schemas/ErrorAPI'

  securitySchemes:
  
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:

    # -------------------
    # Errors
    # -------------------
    ErrorAPI:
      description: API error object
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            messages:
              type: "array"
              items:
                $ref: '#/components/schemas/ErrorAPIMessages'
        status_code:
          type: "integer"   
          example: 400
          
    ErrorAPIMessages:
      description: API error object
      type: "object"
      properties:
        key:
          type: "string"
          example: "group_name"
        value:
          type: "string"
          example: "The group_name field must be between 2-120 chars"
    
    # -------------------
    # Ping  
    # -------------------

    Ping:
      type: "object"
      properties:
        version:
          type: "string"
          example: "v1.0.1"
        message:
          type: "string"
          example: "pong"
  
    # -------------------
    # Auth  
    # -------------------

    Verify:
      type: "object"
      properties:
        token:
          type: "string"
          example: "yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw"
          
    Authorize:
      type: "object"
      properties:
        username:
          type: "string"
          example: "kj"
          description: LDAP username
        password:
          description: LDAP password + OTP token
          type: "string"
          example: "password+otp"

    # -------------------
    # LDAP-Group
    # -------------------

    LDAPGroup:
      type: "object"
      properties:
        ldap_group_name:
          type: string
          example: proxy-sql

    # -------------------
    # Group
    # -------------------
    
    GroupCustomProps:
      type: "object"
      properties:
        key_name_1:
          type: string
          example: "key_name_1_value"
        key_name_2:
          type: string
          example: "key_name_2_value"
    
    Group:
      type: "object"
      properties:
        group_name:
          type: string
          example: proxy-sql
        ldap_group_name:
          type: string
          example: proxy-sql
        lease_time:
          type: integer
          example: 720 # 12 hours
          description: Lease time in minutes
        custom_properties:
          $ref: '#/components/schemas/GroupCustomProps'
        create_time:
          type: integer
          example: 1554102608          
        create_by:
          type: string
          example: kj
          
    GroupNew:
      type: "object"
      properties:
        group_name:
          type: string
          example: proxy-sql       
        lease_time:
          type: integer
          example: 720 # 12 hours 
          description: Lease time in minutes
        custom_properties:
          $ref: '#/components/schemas/GroupCustomProps'     

    # -------------------
    # User  
    # -------------------

    User:
      required:
        - name  
      properties:
        username:
          type: "string"
          example: "kj-proxy-sql-yx4dajg8vn"
        password:
          type: "string"
          example: "jkybs9p8uukysmfarapf"
        group_name:
          type: "string"
          example: "proxy-sql"
        expire_time:
          type: "integer"
          example: 1554102608
        create_time:
          type: "integer"
          example: 1554100608
        create_by:
          type: "string"
          example: "kj"